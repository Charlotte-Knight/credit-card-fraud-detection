services:
  postgres:
    container_name: postgres
    image: postgres
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      start_period: 10s
      start_interval: 1s
    ports:
      - 5432:5432
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres-init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgres/postgres?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    ports:
      - "9187:9187"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    volumes:
      - ./grafana/provisioning/dashboards/ccfd.json:/etc/grafana/provisioning/dashboards/ccfd.json
      - ./grafana/provisioning/dashboards/ccfd.yaml:/etc/grafana/provisioning/dashboards/ccfd.yaml
      - ./grafana/provisioning/dashboards/db.json:/etc/grafana/provisioning/dashboards/db.json
      - ./grafana/provisioning/datasources/postgres.yaml:/etc/grafana/provisioning/datasources/postgres.yaml
      - ./grafana/provisioning/datasources/prometheus.yaml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana/provisioning/datasources/json-api.yaml:/etc/grafana/provisioning/datasources/json-api.yaml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_INSTALL_PLUGINS: "marcusolsson-json-datasource"
    ports:
      - 3000:3000

  ccfd-api:
    #container_name: ccfd-api
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    build: ./ccfd-api
    image: charlotteknight/ccfd-api:${GIT_BRANCH}
    restart: on-failure

    ports:
      - "8000-8008:8000"

    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr

  transaction-generator:
    #container_name: transaction-generator
    build: ./transaction-generator
    image: charlotteknight/transaction-generator:${GIT_BRANCH}
    deploy:
      replicas: 2